name: Authenticated App Scan

on:
  workflow_dispatch:
    inputs:
      domain:
        description: 'Target domain (example.com)'
        required: true
        default: 'example.com'

jobs:
  auth-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 180

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate required secrets
        run: |
          if [ -z "${{ secrets.APP_LOGIN_URL }}" ] || [ -z "${{ secrets.APP_USERNAME }}" ] || [ -z "${{ secrets.APP_PASSWORD }}" ] || [ -z "${{ secrets.DISCORD_WEBHOOK }}" ]; then
            echo "::error::Set APP_LOGIN_URL, APP_USERNAME, APP_PASSWORD and DISCORD_WEBHOOK secrets"
            exit 1
          fi
          echo "DISCORD_WEBHOOK=${{ secrets.DISCORD_WEBHOOK }}" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y python3-pip jq curl || true
          python3 -m pip install --user requests || true
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Set domain env
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.domain }}" ]; then
            echo "DOMAIN=${{ github.event.inputs.domain }}" >> $GITHUB_ENV
          else
            echo "DOMAIN=example.com" >> $GITHUB_ENV
          fi

      - name: Acquire authenticated session (example)
        run: |
          mkdir -p auth-output
          python3 - <<'PY'
import os,requests,sys,json
login_url=os.environ.get('APP_LOGIN_URL')
user=os.environ.get('APP_USERNAME')
pw=os.environ.get('APP_PASSWORD')
s=requests.Session()
try:
    # NOTE: the form fields below are placeholders. Adjust to match your app's login form.
    r=s.post(login_url, data={'username':user,'password':pw}, timeout=20)
    r.raise_for_status()
    print('LOGIN_STATUS', r.status_code)
    with open('auth-output/auth_cookies.json','w') as f:
        json.dump(s.cookies.get_dict(), f)
except Exception as e:
    print('AUTH_ERROR', e)
    sys.exit(1)
PY

      - name: Authenticated check & simple crawl (example)
        run: |
          python3 - <<'PY'
import requests,os,json
try:
    with open('auth-output/auth_cookies.json','r') as f:
        cookies=json.load(f)
    base = 'https://' + os.environ.get('DOMAIN')
    s=requests.Session()
    s.cookies.update(cookies)
    resp = s.get(base, timeout=20)
    print('AUTH_ROOT_STATUS', resp.status_code)
    # Save a small snapshot
    with open('auth-output/root_page.html','w') as out:
        out.write(resp.text[:2000])
except Exception as e:
    print('CRAWL_ERROR', e)
PY

      - name: (Optional) run nuclei authenticated templates
        run: |
          if command -v nuclei >/dev/null 2>&1 && [ -f auth-output/auth_cookies.json ]; then
            # This is a placeholder: to run nuclei authenticated you may need to write cookies to a header file or to use a custom template that accepts cookie input.
            echo "Nuclei authenticated stage skipped (configure templates to use cookies)"; exit 0
          else
            echo "nuclei not available or no auth cookie file"
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: auth-scan-${{ github.run_id }}
          path: auth-output

      - name: Notify
        run: |
          curl -s -X POST -H "Content-Type: application/json" -d "{\"content\": \"âœ… Authenticated scan finished for ${DOMAIN} (artifacts uploaded)\"}" "${DISCORD_WEBHOOK}" || true
