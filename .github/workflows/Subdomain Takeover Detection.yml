name: Subdomain Takeover Detection

on:
  workflow_dispatch:
    inputs:
      domain:
        description: 'Domain to scan (example.com)'
        required: true
        default: 'example.com'
      use_chaos:
        description: 'Use Chaos DB (requires CHAOS_API_KEY secret) (true/false)'
        required: false
        default: 'true'
      use_massdns:
        description: 'Use massdns for fast resolution (true/false)'
        required: false
        default: 'true'
      concurrency:
        description: 'Concurrency for httpx / probes'
        required: false
        default: '20'

jobs:
  takeover:
    runs-on: ubuntu-latest
    timeout-minutes: 90

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate secrets
        run: |
          if [ -z "${{ secrets.DISCORD_WEBHOOK }}" ]; then
            echo "::error::DISCORD_WEBHOOK secret is not set"
            exit 1
          fi
          echo "DISCORD_WEBHOOK=${{ secrets.DISCORD_WEBHOOK }}" >> $GITHUB_ENV
          # optional chaos key
          if [ -n "${{ secrets.CHAOS_API_KEY }}" ]; then
            echo "CHAOS_KEY=1" >> $GITHUB_ENV
          fi

      - name: Set inputs to env
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "DOMAIN=${{ github.event.inputs.domain }}" >> $GITHUB_ENV
            echo "USE_CHAOS=${{ github.event.inputs.use_chaos }}" >> $GITHUB_ENV
            echo "USE_MASSDNS=${{ github.event.inputs.use_massdns }}" >> $GITHUB_ENV
            echo "CONC=${{ github.event.inputs.concurrency }}" >> $GITHUB_ENV
          else
            echo "DOMAIN=example.com" >> $GITHUB_ENV
            echo "USE_CHAOS=true" >> $GITHUB_ENV
            echo "USE_MASSDNS=true" >> $GITHUB_ENV
            echo "CONC=20" >> $GITHUB_ENV
          fi

      - name: Notify Start
        run: |
          curl -s -X POST -H "Content-Type: application/json" \
            -d "{\"content\":\"🛡️ **Takeover scan started**\\n**Domain:** ${{ env.DOMAIN }}\\n**Options:** chaos=${{ env.USE_CHAOS }}, massdns=${{ env.USE_MASSDNS }}\"}" \
            "${{ env.DISCORD_WEBHOOK }}"

      - name: Install system packages & Go
        run: |
          sudo apt-get update -y
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y git curl jq build-essential make gcc python3 python3-pip || true
          echo "$HOME/go/bin" >> $GITHUB_PATH

      - name: Install tools (subfinder, assetfinder, httpx, dnsx, nuclei, subjack)
        run: |
          export PATH=$PATH:$HOME/go/bin:$HOME/.local/bin
          /usr/bin/env bash -lc "go install -v github.com/projectdiscovery/subfinder/v2/cmd/subfinder@latest" || true
          /usr/bin/env bash -lc "go install -v github.com/tomnomnom/assetfinder@latest" || true
          /usr/bin/env bash -lc "go install -v github.com/projectdiscovery/httpx/cmd/httpx@latest" || true
          /usr/bin/env bash -lc "go install -v github.com/projectdiscovery/dnsx/cmd/dnsx@latest" || true
          /usr/bin/env bash -lc "go install -v github.com/projectdiscovery/nuclei/v3/cmd/nuclei@latest" || true
          # subjack (classic takeover scanner)
          if ! command -v subjack >/dev/null 2>&1; then
            /usr/bin/env bash -lc "go install -v github.com/haccer/subjack@latest" || true
          fi
          echo "$HOME/go/bin" >> $GITHUB_PATH

      - name: Optionally build massdns (fast resolver)
        if: env.USE_MASSDNS == 'true'
        run: |
          if ! command -v massdns >/dev/null 2>&1; then
            git clone https://github.com/blechschmidt/massdns.git massdns-repo || true
            cd massdns-repo || exit 1
            make || (echo "::warning::massdns build failed"; exit 0)
            sudo cp bin/massdns /usr/local/bin/ || true
            sudo chmod +x /usr/local/bin/massdns || true
            cd ..
          fi
          mkdir -p resolvers
          if [ ! -f resolvers/resolvers.txt ]; then
            curl -fsSL "https://raw.githubusercontent.com/trickest/resolvers/main/resolvers.txt" -o resolvers/resolvers.txt || echo -e "1.1.1.1\n8.8.8.8\n9.9.9.9" > resolvers/resolvers.txt
          fi
          echo "RESOLVERS=./resolvers/resolvers.txt" >> $GITHUB_ENV

      - name: Download fingerprints for subjack
        run: |
          mkdir -p takeover-fingerprints
          # official subjack fingerprints (if present), fallback to popular list
          curl -fsSL https://raw.githubusercontent.com/haccer/subjack/master/fingerprints.json -o takeover-fingerprints/fingerprints.json || true

      - name: Passive enumeration (crt.sh + subfinder + assetfinder + chaos)
        run: |
          DOMAIN="${{ env.DOMAIN }}"
          mkdir -p output
          curl -s "https://crt.sh/?q=%25.$DOMAIN&output=json" | jq -r '.[].name_value' 2>/dev/null | sed 's/\*\.//g' | tr ',' '\n' > output/crtsh.txt || true
          subfinder -d "$DOMAIN" -silent -o output/subfinder-passive.txt || true
          assetfinder --subs-only "$DOMAIN" 2>/dev/null > output/assetfinder.txt || true
          if [ "${{ env.USE_CHAOS }}" = "true" ] && [ -n "${{ secrets.CHAOS_API_KEY }}" ]; then
            export CHAOS_API_KEY="${{ secrets.CHAOS_API_KEY }}"
            chaos -d "$DOMAIN" -silent -o output/chaos.txt || true
          else
            touch output/chaos.txt
          fi
          cat output/crtsh.txt output/subfinder-passive.txt output/assetfinder.txt output/chaos.txt 2>/dev/null | sed '/^\s*$/d' | sort -u > output/passive-subdomains.txt || true
          echo "PASSIVE_COUNT=$(wc -l < output/passive-subdomains.txt || echo 0)" >> $GITHUB_ENV
          curl -s -X POST -H "Content-Type: application/json" -d "{\"content\":\"🔎 Passive enumeration done: ${{ env.DOMAIN }} — $(wc -l < output/passive-subdomains.txt || echo 0) results\"}" "${{ env.DISCORD_WEBHOOK }}"

      - name: Bruteforce (wordlist) -> generate candidates
        run: |
          mkdir -p wordlists
          WL="wordlists/n0kovo_subdomains.txt"
          if [ ! -f "$WL" ]; then
            curl -fsSL "https://raw.githubusercontent.com/danielmiessler/SecLists/master/Discovery/DNS/n0kovo_subdomains.txt" -o "$WL" || echo -e "www\nmail\napi\ndev\nftp" > "$WL"
          fi
          awk -v d="${{ env.DOMAIN }}" '{print $0"."d}' "$WL" | sort -u > output/bruteforce-candidates.txt || true
          echo "BRUTE_CANDIDATES=$(wc -l < output/bruteforce-candidates.txt || echo 0)" >> $GITHUB_ENV
          curl -s -X POST -H "Content-Type: application/json" -d "{\"content\":\"🔨 Bruteforce candidates: $(wc -l < output/bruteforce-candidates.txt || echo 0)\"}" "${{ env.DISCORD_WEBHOOK }}"

      - name: Resolve candidates quickly (massdns or dnsx fallback)
        run: |
          cd output
          if [ "${{ env.USE_MASSDNS }}" = "true" ] && command -v massdns >/dev/null 2>&1; then
            split -l 5000 ../output/bruteforce-candidates.txt chunk_
            > massdns-raw.txt
            for f in chunk_*; do
              massdns -r ../resolvers/resolvers.txt -t A -o S $f >> massdns-raw.txt || true
            done
            awk '{print $1}' massdns-raw.txt | sed 's/\.$//' | sed '/^\s*$/d' | sort -u > massdns-resolved.txt || true
          elif command -v dnsx >/dev/null 2>&1; then
            dnsx -l ../output/bruteforce-candidates.txt -silent -resp -o dnsx-resolved.txt || true
          else
            > simple-resolved.txt
            while read -r host; do
              if getent hosts "$host" >/dev/null 2>&1; then
                echo "$host" >> simple-resolved.txt
              fi
            done < ../output/bruteforce-candidates.txt || true
            sort -u simple-resolved.txt -o simple-resolved.txt || true
          fi
          cd ..

      - name: Merge & dedupe subdomains
        run: |
          cat output/passive-subdomains.txt output/massdns-resolved.txt output/dnsx-resolved.txt output/simple-resolved.txt 2>/dev/null | sed '/^\s*$/d' | sort -u > output/combined-subdomains.txt || true
          echo "COMBINED_COUNT=$(wc -l < output/combined-subdomains.txt || echo 0)" >> $GITHUB_ENV
          curl -s -X POST -H "Content-Type: application/json" -d "{\"content\":\"🗂️ Combined subdomains: $(wc -l < output/combined-subdomains.txt || echo 0) unique\"}" "${{ env.DISCORD_WEBHOOK }}"

      - name: Probe HTTP(s) (httpx) - build live URL list
        run: |
          if command -v httpx >/dev/null 2>&1; then
            httpx -l output/combined-subdomains.txt -silent -threads "${{ env.concurrency }}" -o output/httpx-raw.txt || true
            awk '{print $1}' output/httpx-raw.txt | sed 's|https\?://||' | sed 's/:[0-9]*$//' | sort -u > output/live-hosts.txt || true
            # Save full URLs for nuclei/httpx scanning
            awk '{print $1}' output/httpx-raw.txt | sort -u > output/live-urls.txt || true
          else
            > output/live-hosts.txt
            while read -r h; do
              if curl -s --max-time 5 -I "http://$h" >/dev/null 2>&1 || curl -s --max-time 5 -I "https://$h" >/dev/null 2>&1; then
                echo "$h" >> output/live-hosts.txt
              fi
            done < output/combined-subdomains.txt || true
          fi
          echo "LIVE_COUNT=$(wc -l < output/live-hosts.txt || echo 0)" >> $GITHUB_ENV
          curl -s -X POST -H "Content-Type: application/json" -d "{\"content\":\"📡 Live hosts discovered: $(wc -l < output/live-hosts.txt || echo 0)\"}" "${{ env.DISCORD_WEBHOOK }}"

      - name: Subjack takeover scan (CNAME & fingerprints)
        run: |
          # prepare input for subjack (hosts or CNAMEs)
          # subjack expects a file with hostnames; we'll pass combined list
          touch output/subjack-results.txt
          if command -v subjack >/dev/null 2>&1; then
            # subjack needs a fingerprints json; we downloaded earlier
            subjack -w output/combined-subdomains.txt -a -t 40 -timeout 30 -c takeover-fingerprints/fingerprints.json -v 2 -o output/subjack-raw.txt || true
            # filter lines that indicate potential takeover
            grep -i "vulnerable" output/subjack-raw.txt > output/subjack-results.txt || true
          else
            echo "::warning::subjack not installed - skipping subjack"
          fi
          SJ_COUNT=$(wc -l < output/subjack-results.txt || echo 0)
          echo "SUBJACK_COUNT=${SJ_COUNT}" >> $GITHUB_ENV
          if [ "${SJ_COUNT}" -gt 0 ]; then
            curl -s -X POST -H "Content-Type: application/json" -d "{\"content\":\"🚨 subjack: potential takeover candidates found: ${SJ_COUNT} (see artifacts)\"}" "${{ env.DISCORD_WEBHOOK }}"
          fi

      - name: Nuclei takeover templates scan
        run: |
          if ! command -v nuclei >/dev/null 2>&1; then
            echo "::warning::nuclei not installed - skipping nuclei takeover templates"
            exit 0
          fi
          nuclei -update-templates || true
          # Use -tags takeover to run takeover-related templates
          if [ -s output/live-urls.txt ]; then
            nuclei -l output/live-urls.txt -tags takeover -silent -o output/nuclei-takeover.txt || true
          else
            nuclei -l output/live-hosts.txt -tags takeover -silent -o output/nuclei-takeover.txt || true
          fi
          NUC_COUNT=$(wc -l < output/nuclei-takeover.txt || echo 0)
          echo "NUC_COUNT=${NUC_COUNT}" >> $GITHUB_ENV
          if [ "${NUC_COUNT}" -gt 0 ]; then
            split -l 10 output/nuclei-takeover.txt nuclei-takeover-batch-
            for f in nuclei-takeover-batch-*; do
              BODY=$(cat "$f")
              curl -s -X POST -H "Content-Type: application/json" -d "{\"content\": $(echo \"$BODY\" | jq -Rs .)}" "${{ env.DISCORD_WEBHOOK }}"
              sleep 1
            done
          fi

      - name: Aggregate findings & notify
        run: |
          TOTAL_FINDINGS=0
          SJ=${SUBJACK_COUNT:-0}
          NUC=${NUC_COUNT:-0}
          # try to read values exported earlier
          if [ -f output/subjack-results.txt ]; then SJ=$(wc -l < output/subjack-results.txt || echo 0); fi
          if [ -f output/nuclei-takeover.txt ]; then NUC=$(wc -l < output/nuclei-takeover.txt || echo 0); fi
          TOTAL_FINDINGS=$((SJ + NUC))
          curl -s -X POST -H "Content-Type: application/json" -d "{\"content\":\"🔔 **Takeover scan finished**\\n**Domain:** ${{ env.DOMAIN }}\\nSubjack findings: ${SJ}\\nNuclei findings: ${NUC}\\nTotal: ${TOTAL_FINDINGS}\\n(Artifacts uploaded)\"}" "${{ env.DISCORD_WEBHOOK }}"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: takeover-scan-${{ env.DOMAIN }}-${{ github.run_id }}
          path: |
            output/combined-subdomains.txt
            output/passive-subdomains.txt
            output/bruteforce-candidates.txt
            output/massdns-raw.txt
            output/massdns-resolved.txt
            output/dnsx-resolved.txt
            output/simple-resolved.txt
            output/live-hosts.txt
            output/live-urls.txt
            output/subjack-raw.txt
            output/subjack-results.txt
            output/nuclei-takeover.txt

      - name: Final note
        run: |
          curl -s -X POST -H "Content-Type: application/json" -d "{\"content\":\"✅ Scan artifacts uploaded. Please triage findings manually (Subjack + Nuclei might contain false positives).\"}" "${{ env.DISCORD_WEBHOOK }}"
