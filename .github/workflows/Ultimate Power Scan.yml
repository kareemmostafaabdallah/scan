name: Ultimate Power Scan (Passive + Active + Bruteforce + Vuln)

on:
  workflow_dispatch:
    inputs:
      domain:
        description: 'Domain to scan (example.com)'
        required: true
        default: 'example.com'
      enable_nuclei:
        description: 'Run nuclei on live hosts? (true/false)'
        required: false
        default: 'false'
      enable_amass_active:
        description: 'Run amass active bruteforce? (true/false) - slow'
        required: false
        default: 'false'
      use_massdns:
        description: 'Use massdns for ultra-fast resolution? (true/false)'
        required: false
        default: 'true'
      use_chaos:
        description: 'Query Chaos DB (requires CHAOS_API_KEY secret) (true/false)'
        required: false
        default: 'true'
      enable_portscan:
        description: 'Run naabu TCP port scan on live hosts? (true/false)'
        required: false
        default: 'true'
      concurrency:
        description: 'Concurrency for probes (recommended 20)'
        required: false
        default: '20'
      wordlist_url:
        description: 'Wordlist raw URL (defaults to SecLists n0kovo)'
        required: false
        default: 'https://raw.githubusercontent.com/danielmiessler/SecLists/master/Discovery/DNS/n0kovo_subdomains.txt'

jobs:
  ultimate-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 240
    env:
      DEFAULT_DOMAIN: example.com

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Validate required secrets
        run: |
          if [ -z "${{ secrets.DISCORD_WEBHOOK }}" ]; then
            echo "::error::DISCORD_WEBHOOK secret is not set"
            exit 1
          fi
          # Do NOT echo secrets to logs
          echo "DISCORD_WEBHOOK=${{ secrets.DISCORD_WEBHOOK }}" >> $GITHUB_ENV
          # optional keys
          if [ -n "${{ secrets.CHAOS_API_KEY }}" ]; then
            echo "CHAOS_KEY_PRESENT=1" >> $GITHUB_ENV
          fi
          if [ -n "${{ secrets.SHODAN_APIKEY }}" ]; then
            echo "SHODAN_KEY_PRESENT=1" >> $GITHUB_ENV
          fi
          if [ -n "${{ secrets.CENSYS_API_ID }}" ] && [ -n "${{ secrets.CENSYS_API_SECRET }}" ]; then
            echo "CENSYS_PRESENT=1" >> $GITHUB_ENV
          fi

      - name: Set inputs
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "DOMAIN=${{ github.event.inputs.domain }}" >> $GITHUB_ENV
            echo "ENABLE_NUCLEI=${{ github.event.inputs.enable_nuclei }}" >> $GITHUB_ENV
            echo "ENABLE_AMASS_ACTIVE=${{ github.event.inputs.enable_amass_active }}" >> $GITHUB_ENV
            echo "USE_MASSDNS=${{ github.event.inputs.use_massdns }}" >> $GITHUB_ENV
            echo "USE_CHAOS=${{ github.event.inputs.use_chaos }}" >> $GITHUB_ENV
            echo "ENABLE_PORTSCAN=${{ github.event.inputs.enable_portscan }}" >> $GITHUB_ENV
            echo "CONC=${{ github.event.inputs.concurrency }}" >> $GITHUB_ENV
            echo "WORDLIST_URL=${{ github.event.inputs.wordlist_url }}" >> $GITHUB_ENV
          else
            echo "DOMAIN=${{ env.DEFAULT_DOMAIN }}" >> $GITHUB_ENV
            echo "ENABLE_NUCLEI=false" >> $GITHUB_ENV
            echo "ENABLE_AMASS_ACTIVE=false" >> $GITHUB_ENV
            echo "USE_MASSDNS=true" >> $GITHUB_ENV
            echo "USE_CHAOS=true" >> $GITHUB_ENV
            echo "ENABLE_PORTSCAN=true" >> $GITHUB_ENV
            echo "CONC=20" >> $GITHUB_ENV
            echo "WORDLIST_URL=https://raw.githubusercontent.com/danielmiessler/SecLists/master/Discovery/DNS/n0kovo_subdomains.txt" >> $GITHUB_ENV
          fi

      - name: Notify - scan starting
        run: |
          curl -s -X POST -H "Content-Type: application/json" \
            -d "{\"content\":\"🚀 **Ultimate Power Scan started**\n**Domain:** ${{ env.DOMAIN }}\n**Options:** nuclei=${{ env.ENABLE_NUCLEI }}, massdns=${{ env.USE_MASSDNS }}, amass_active=${{ env.ENABLE_AMASS_ACTIVE }}, ports=${{ env.ENABLE_PORTSCAN }}\"}" \
            "${{ env.DISCORD_WEBHOOK }}"

      - name: Install system packages
        run: |
          sudo apt-get update -y
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y git curl jq build-essential pkg-config libssl-dev python3 python3-pip make gcc wget unzip || true
          # massdns needs ldconfig libs, ensure resolver tools installed
          sudo apt-get install -y libpcap0.8 libpcap-dev || true
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          echo "$HOME/go/bin" >> $GITHUB_PATH

      - name: Install Go tools (subfinder, assetfinder, httpx, dnsx, nuclei, naabu, chaos)
        run: |
          export PATH=$PATH:$HOME/go/bin:$HOME/.local/bin
          /usr/bin/env bash -lc "go install -v github.com/projectdiscovery/subfinder/v2/cmd/subfinder@latest" || true
          /usr/bin/env bash -lc "go install -v github.com/tomnomnom/assetfinder@latest" || true
          /usr/bin/env bash -lc "go install -v github.com/projectdiscovery/httpx/cmd/httpx@latest" || true
          /usr/bin/env bash -lc "go install -v github.com/projectdiscovery/dnsx/cmd/dnsx@latest" || true
          /usr/bin/env bash -lc "go install -v github.com/projectdiscovery/nuclei/v3/cmd/nuclei@latest" || true
          /usr/bin/env bash -lc "go install -v github.com/projectdiscovery/naabu/v2/cmd/naabu@latest" || true
          /usr/bin/env bash -lc "go install -v github.com/projectdiscovery/chaos-client/cmd/chaos@latest" || true

      - name: Install amass (apt) and dalfox (go)
        run: |
          if ! command -v amass >/dev/null 2>&1; then
            sudo apt-get install -y amass || true
          fi
          /usr/bin/env bash -lc "go install -v github.com/hahwul/dalfox@latest" || true

      - name: Build massdns (optional, fast resolver)
        if: env.USE_MASSDNS == 'true'
        run: |
          if ! command -v massdns >/dev/null 2>&1; then
            git clone https://github.com/blechschmidt/massdns.git massdns-repo || true
            cd massdns-repo || exit 1
            make || (echo "::warning::massdns build failed"; exit 0)
            sudo cp bin/massdns /usr/local/bin/ || true
            sudo chmod +x /usr/local/bin/massdns || true
          fi
          mkdir -p resolvers
          if [ ! -f resolvers/resolvers.txt ]; then
            curl -fsSL "https://raw.githubusercontent.com/trickest/resolvers/main/resolvers.txt" -o resolvers/resolvers.txt || echo -e "1.1.1.1\n8.8.8.8\n9.9.9.9" > resolvers/resolvers.txt
          fi
          echo "RESOLVERS=./resolvers/resolvers.txt" >> $GITHUB_ENV

      - name: Download wordlist
        run: |
          mkdir -p wordlists
          WL="wordlists/custom-wordlist.txt"
          if [ ! -f "$WL" ]; then
            curl -fsSL "${{ env.WORDLIST_URL }}" -o "$WL" || echo -e "www\nmail\napi\ndev\nftp" > "$WL"
          fi
          echo "WORDLIST=$WL" >> $GITHUB_ENV

      - name: Passive enumeration (crt.sh + subfinder + assetfinder + amass passive)
        run: |
          DOMAIN="${{ env.DOMAIN }}"
          mkdir -p output
          curl -s "https://crt.sh/?q=%25.$DOMAIN&output=json" | jq -r '.[].name_value' 2>/dev/null | sed 's/\*\.//g' | tr ',' '\n' > output/crtsh.txt || true
          subfinder -d "$DOMAIN" -silent -o output/subfinder-passive.txt || true
          assetfinder --subs-only "$DOMAIN" 2>/dev/null || true > output/assetfinder.txt || true
          if command -v amass >/dev/null 2>&1; then
            amass enum -passive -norecursive -d "$DOMAIN" -o output/amass-passive.txt || true
          fi
          if [ "${{ env.USE_CHAOS }}" = "true" ] && [ -n "${{ secrets.CHAOS_API_KEY }}" ]; then
            export CHAOS_API_KEY="${{ secrets.CHAOS_API_KEY }}"
            chaos -d "$DOMAIN" -silent -o output/chaos.txt || true
          else
            touch output/chaos.txt
          fi
          # normalize and combine passive
          cat output/crtsh.txt output/subfinder-passive.txt output/assetfinder.txt output/amass-passive.txt output/chaos.txt 2>/dev/null | sed '/^\s*$/d' | sort -u > output/passive-subdomains.txt || true
          echo "PASSIVE_COUNT=$(wc -l < output/passive-subdomains.txt || echo 0)" >> $GITHUB_ENV
          curl -s -X POST -H "Content-Type: application/json" -d "{\"content\":\"🔎 Passive enumeration done: ${{ env.DOMAIN }} — ${{ env.PASSIVE_COUNT }} results\"}" "${{ env.DISCORD_WEBHOOK }}"

      - name: Bruteforce candidates (wordlist -> FQDN)
        run: |
          DOMAIN="${{ env.DOMAIN }}"
          WL="${{ env.WORDLIST }}"
          awk -v d="$DOMAIN" '{gsub(/\r/,""); print $0"."d}' "$WL" | sort -u > output/bruteforce-candidates.txt || true
          echo "BRUTE_CANDIDATES=$(wc -l < output/bruteforce-candidates.txt || echo 0)" >> $GITHUB_ENV
          curl -s -X POST -H "Content-Type: application/json" -d "{\"content\":\"🔨 Bruteforce candidates generated: ${{ env.BRUTE_CANDIDATES }}\"}" "${{ env.DISCORD_WEBHOOK }}"

      - name: Fast resolution (massdns) or dnsx fallback
        run: |
          cd output
          if [ "${{ env.USE_MASSDNS }}" = "true" ] && command -v massdns >/dev/null 2>&1; then
            split -l 5000 ../output/bruteforce-candidates.txt chunk_
            > massdns-resolved.txt
            for f in chunk_*; do
              massdns -r ../resolvers/resolvers.txt -t A -o S $f >> massdns-raw.txt || true
            done
            awk '{print $1}' massdns-raw.txt | sed 's/\.$//' | sed '/^\s*$/d' | sort -u > massdns-resolved.txt || true
          elif command -v dnsx >/dev/null 2>&1; then
            dnsx -l ../output/bruteforce-candidates.txt -silent -resp -o dnsx-resolved.txt || true
          else
            > simple-resolved.txt
            while read -r host; do
              if getent hosts "$host" >/dev/null 2>&1; then
                echo "$host" >> simple-resolved.txt
              fi
            done < ../output/bruteforce-candidates.txt || true
            sort -u simple-resolved.txt -o simple-resolved.txt || true
          fi
          cd ..

      - name: Merge & dedupe all sources
        run: |
          cat output/passive-subdomains.txt output/massdns-resolved.txt output/dnsx-resolved.txt output/simple-resolved.txt 2>/dev/null | sed '/^\s*$/d' | sort -u > output/combined-subdomains.txt || true
          echo "COMBINED_COUNT=$(wc -l < output/combined-subdomains.txt || echo 0)" >> $GITHUB_ENV
          curl -s -X POST -H "Content-Type: application/json" -d "{\"content\":\"🗂️ Combined subdomains: ${{ env.COMBINED_COUNT }} unique\"}" "${{ env.DISCORD_WEBHOOK }}"

      - name: Probe HTTP(s) (httpx) for live hosts & URLs
        run: |
          if command -v httpx >/dev/null 2>&1; then
            httpx -l output/combined-subdomains.txt -silent -threads "${{ env.CONC }}" -timeout 10 -status-code -o output/httpx-raw.txt || true
            awk '{print $1}' output/httpx-raw.txt | sed 's|https\?://||' | sed 's/:[0-9]*$//' | sort -u > output/live-hosts.txt || true
            # also collect full URLs for further scanning
            awk '{print $1}' output/httpx-raw.txt | sort -u > output/live-urls.txt || true
          else
            > output/live-hosts.txt
            while read -r h; do
              if curl -s --max-time 5 -I "http://$h" >/dev/null 2>&1 || curl -s --max-time 5 -I "https://$h" >/dev/null 2>&1; then
                echo "$h" >> output/live-hosts.txt
              fi
            done < output/combined-subdomains.txt || true
          fi
          echo "LIVE_COUNT=$(wc -l < output/live-hosts.txt || echo 0)" >> $GITHUB_ENV
          curl -s -X POST -H "Content-Type: application/json" -d "{\"content\":\"📡 Live hosts: ${{ env.LIVE_COUNT }} responsive\"}" "${{ env.DISCORD_WEBHOOK }}"

      - name: Optional port scan (naabu)
        if: env.ENABLE_PORTSCAN == 'true'
        run: |
          if command -v naabu >/dev/null 2>&1; then
            naabu -l output/live-hosts.txt -silent -top-ports 100 -rate 100 -o output/naabu-ports.txt || true
          else
            echo "::warning::naabu not installed - skipping ports scan"
          fi

      - name: Optional amass active bruteforce (heavy)
        if: env.ENABLE_AMASS_ACTIVE == 'true'
        run: |
          if command -v amass >/dev/null 2>&1; then
            amass enum -active -bruteforce -w "${{ env.WORDLIST }}" -d "${{ env.DOMAIN }}" -o output/amass-active.txt || true
            cat output/amass-active.txt >> output/combined-subdomains.txt || true
            sort -u output/combined-subdomains.txt -o output/combined-subdomains.txt || true
          else
            echo "::warning::amass not installed - skipping active bruteforce"
          fi

      - name: Optional nuclei scan (on live URLs)
        if: env.ENABLE_NUCLEI == 'true'
        run: |
          if ! command -v nuclei >/dev/null 2>&1; then
            echo "::warning::nuclei not installed - skipping nuclei stage"
            exit 0
          fi
          nuclei -update-templates || true
          # prefer scanning full URLs if available, else scan hosts
          if [ -s output/live-urls.txt ]; then
            nuclei -l output/live-urls.txt -severity critical,high -silent -o output/nuclei-results.txt || true
          else
            nuclei -l output/live-hosts.txt -severity critical,high -silent -o output/nuclei-results.txt || true
          fi
          echo "NUCLEI_COUNT=$(wc -l < output/nuclei-results.txt || echo 0)" >> $GITHUB_ENV
          if [ -s output/nuclei-results.txt ]; then
            split -l 20 output/nuclei-results.txt nuclei-batch-
            for f in nuclei-batch-*; do
              BODY=$(cat "$f")
              curl -s -X POST -H "Content-Type: application/json" -d "{\"content\": $(echo \"$BODY\" | jq -Rs .)}" "${{ env.DISCORD_WEBHOOK }}"
              sleep 2
            done
          else
            curl -s -X POST -H "Content-Type: application/json" -d "{\"content\":\"✅ Nuclei: no critical/high results for ${{ env.DOMAIN }}.\"}" "${{ env.DISCORD_WEBHOOK }}"
          fi

      - name: Optional XSS scan (dalfox) on live URLs
        if: env.ENABLE_NUCLEI == 'true'
        run: |
          if command -v dalfox >/dev/null 2>&1 && [ -s output/live-urls.txt ]; then
            dalfox file ./output/live-urls.txt -o ./output/dalfox-results.txt || true
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ultimate-scan-${{ env.DOMAIN }}-${{ github.run_id }}
          path: |
            output/crtsh.txt
            output/subfinder-passive.txt
            output/assetfinder.txt
            output/amass-passive.txt
            output/chaos.txt
            output/passive-subdomains.txt
            output/bruteforce-candidates.txt
            output/massdns-raw.txt
            output/massdns-resolved.txt
            output/dnsx-resolved.txt
            output/simple-resolved.txt
            output/combined-subdomains.txt
            output/httpx-raw.txt
            output/live-hosts.txt
            output/live-urls.txt
            output/naabu-ports.txt
            output/amass-active.txt
            output/nuclei-results.txt
            output/dalfox-results.txt

      - name: Final summary & notify
        run: |
          SUMMARY="✅ **Scan finished**\n**Domain:** ${{ env.DOMAIN }}\nPassive: ${{ env.PASSIVE_COUNT }}\nCombined: ${{ env.COMBINED_COUNT }}\nLive: ${{ env.LIVE_COUNT }}\nNuclei: ${{ env.NUCLEI_COUNT }}"
          curl -s -X POST -H "Content-Type: application/json" -d "{\"content\": $(echo \"$SUMMARY\" | jq -Rs .)}" "${{ env.DISCORD_WEBHOOK }}"
