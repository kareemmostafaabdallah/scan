name: Deep Recon & Vulnerability Scan (powerful)

# Run manually or daily (change schedule as you like)
on:
  workflow_dispatch:
    inputs:
      domain:
        description: 'Domain to scan (example.com)'
        required: true
        default: 'example.com'
      enable_amass_active:
        description: 'Run amass active brute force (slow, heavy) (true/false)'
        required: false
        default: 'false'
      use_massdns:
        description: 'Use massdns for fast resolution (true/false)'
        required: false
        default: 'true'
      enable_naabu:
        description: 'Run naabu port scan on live hosts (true/false)'
        required: false
        default: 'true'
      enable_nuclei:
        description: 'Run nuclei vuln scan on live URLs (true/false)'
        required: false
        default: 'true'
      use_chaos:
        description: 'Query Chaos DB (requires CHAOS_API_KEY secret) (true/false)'
        required: false
        default: 'true'
      concurrency:
        description: 'General concurrency / threads (recommended 20)'
        required: false
        default: '20'
  schedule:
    - cron: '0 2 * * *' # daily at 02:00 UTC; change or remove if you prefer manual runs

jobs:
  deep-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 360
    env:
      DEFAULT_DOMAIN: example.com

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate required secrets
        run: |
          if [ -z "${{ secrets.DISCORD_WEBHOOK }}" ]; then
            echo "::error::DISCORD_WEBHOOK secret is not set (required for notifications)"
            exit 1
          fi
          echo "DISCORD_WEBHOOK=${{ secrets.DISCORD_WEBHOOK }}" >> $GITHUB_ENV
          # Optional integration keys
          if [ -n "${{ secrets.CHAOS_API_KEY }}" ]; then echo "CHAOS_KEY_PRESENT=1" >> $GITHUB_ENV; fi
          if [ -n "${{ secrets.SHODAN_APIKEY }}" ]; then echo "SHODAN_KEY_PRESENT=1" >> $GITHUB_ENV; fi
          if [ -n "${{ secrets.CENSYS_API_ID }}" ] && [ -n "${{ secrets.CENSYS_API_SECRET }}" ]; then echo "CENSYS_PRESENT=1" >> $GITHUB_ENV; fi

      - name: Setup inputs
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "DOMAIN=${{ github.event.inputs.domain }}" >> $GITHUB_ENV
            echo "ENABLE_AMASS_ACTIVE=${{ github.event.inputs.enable_amass_active }}" >> $GITHUB_ENV
            echo "USE_MASSDNS=${{ github.event.inputs.use_massdns }}" >> $GITHUB_ENV
            echo "ENABLE_NAABU=${{ github.event.inputs.enable_naabu }}" >> $GITHUB_ENV
            echo "ENABLE_NUCLEI=${{ github.event.inputs.enable_nuclei }}" >> $GITHUB_ENV
            echo "USE_CHAOS=${{ github.event.inputs.use_chaos }}" >> $GITHUB_ENV
            echo "CONC=${{ github.event.inputs.concurrency }}" >> $GITHUB_ENV
          else
            echo "DOMAIN=${{ env.DEFAULT_DOMAIN }}" >> $GITHUB_ENV
            echo "ENABLE_AMASS_ACTIVE=false" >> $GITHUB_ENV
            echo "USE_MASSDNS=true" >> $GITHUB_ENV
            echo "ENABLE_NAABU=true" >> $GITHUB_ENV
            echo "ENABLE_NUCLEI=true" >> $GITHUB_ENV
            echo "USE_CHAOS=true" >> $GITHUB_ENV
            echo "CONC=20" >> $GITHUB_ENV
          fi

      - name: Notify start (Discord)
        run: |
          curl -s -X POST -H "Content-Type: application/json" \
            -d "{\"content\":\"🚀 **Deep Recon Scan started**\\n**Domain:** ${{ env.DOMAIN }}\\n**Options:** amass_active=${{ env.ENABLE_AMASS_ACTIVE }}, massdns=${{ env.USE_MASSDNS }}, naabu=${{ env.ENABLE_NAABU }}, nuclei=${{ env.ENABLE_NUCLEI }}\"}" \
            "${{ env.DISCORD_WEBHOOK }}"

      - name: Install system deps & Go
        run: |
          sudo apt-get update -y
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y git curl jq build-essential make gcc python3 python3-pip wget unzip || true
          echo "$HOME/go/bin" >> $GITHUB_PATH
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install Go tools (subfinder/assetfinder/httpx/dnsx/nuclei/naabu/chaos-client)
        run: |
          export PATH=$PATH:$HOME/go/bin:$HOME/.local/bin
          /usr/bin/env bash -lc "go install -v github.com/projectdiscovery/subfinder/v2/cmd/subfinder@latest" || true
          /usr/bin/env bash -lc "go install -v github.com/tomnomnom/assetfinder@latest" || true
          /usr/bin/env bash -lc "go install -v github.com/projectdiscovery/httpx/cmd/httpx@latest" || true
          /usr/bin/env bash -lc "go install -v github.com/projectdiscovery/dnsx/cmd/dnsx@latest" || true
          /usr/bin/env bash -lc "go install -v github.com/projectdiscovery/nuclei/v3/cmd/nuclei@latest" || true
          /usr/bin/env bash -lc "go install -v github.com/projectdiscovery/naabu/v2/cmd/naabu@latest" || true
          /usr/bin/env bash -lc "go install -v github.com/projectdiscovery/chaos-client/cmd/chaos@latest" || true
          # subjack for takeover fingerprinting
          /usr/bin/env bash -lc "go install -v github.com/haccer/subjack@latest" || true

      - name: Install amass & massdns build prep
        run: |
          if ! command -v amass >/dev/null 2>&1; then
            sudo apt-get install -y amass || true
          fi
          # prepare massdns build dir
          if [ "${{ env.USE_MASSDNS }}" = "true" ]; then
            if [ ! -d massdns-repo ]; then
              git clone https://github.com/blechschmidt/massdns.git massdns-repo || true
            fi
          fi

      - name: Build massdns (optional, fast resolver)
        if: env.USE_MASSDNS == 'true'
        run: |
          cd massdns-repo || exit 0
          make || (echo "::warning::massdns build failed"; exit 0)
          sudo cp bin/massdns /usr/local/bin/ || true
          sudo chmod +x /usr/local/bin/massdns || true
          cd ..

      - name: Prepare resolvers and wordlist
        run: |
          mkdir -p scan-output wordlists resolvers
          if [ ! -f resolvers/resolvers.txt ]; then
            curl -fsSL "https://raw.githubusercontent.com/trickest/resolvers/main/resolvers.txt" -o resolvers/resolvers.txt || echo -e "1.1.1.1\n8.8.8.8\n9.9.9.9" > resolvers/resolvers.txt
          fi
          if [ ! -f wordlists/n0kovo_subdomains.txt ]; then
            curl -fsSL "https://raw.githubusercontent.com/danielmiessler/SecLists/master/Discovery/DNS/n0kovo_subdomains.txt" -o wordlists/n0kovo_subdomains.txt || echo -e "www\nmail\napi\ndev\nftp" > wordlists/n0kovo_subdomains.txt
          fi

      - name: Passive enumeration (crt.sh + subfinder + assetfinder + chaos)
        run: |
          DOMAIN="${{ env.DOMAIN }}"
          mkdir -p scan-output/passive
          curl -s "https://crt.sh/?q=%25.$DOMAIN&output=json" | jq -r '.[].name_value' 2>/dev/null | sed 's/\*\.//g' | tr ',' '\n' > scan-output/passive/crtsh.txt || true
          subfinder -d "$DOMAIN" -silent -o scan-output/passive/subfinder.txt || true
          assetfinder --subs-only "$DOMAIN" > scan-output/passive/assetfinder.txt 2>/dev/null || true
          if [ "${{ env.USE_CHAOS }}" = "true" ] && [ -n "${{ secrets.CHAOS_API_KEY }}" ]; then
            export CHAOS_API_KEY="${{ secrets.CHAOS_API_KEY }}"
            chaos -d "$DOMAIN" -silent -o scan-output/passive/chaos.txt || true
          else
            touch scan-output/passive/chaos.txt
          fi
          cat scan-output/passive/*.txt | sed '/^\s*$/d' | sort -u > scan-output/passive/passive_subs.txt || true
          PASSIVE_COUNT=$(wc -l < scan-output/passive/passive_subs.txt || echo 0)
          echo "PASSIVE_COUNT=${PASSIVE_COUNT}" >> $GITHUB_ENV
          curl -s -X POST -H "Content-Type: application/json" -d "{\"content\":\"🔎 Passive enumeration done: ${DOMAIN} — ${PASSIVE_COUNT} results\"}" "${{ env.DISCORD_WEBHOOK }}"

      - name: Bruteforce subdomains (wordlist -> FQDN)
        run: |
          DOMAIN="${{ env.DOMAIN }}"
          mkdir -p scan-output/bruteforce
          awk -v d="$DOMAIN" '{gsub(/\r/,""); print $0"."d}' wordlists/n0kovo_subdomains.txt | sort -u > scan-output/bruteforce/brute_candidates.txt || true
          BRUTE_CANDIDATES=$(wc -l < scan-output/bruteforce/brute_candidates.txt || echo 0)
          echo "BRUTE_CANDIDATES=${BRUTE_CANDIDATES}" >> $GITHUB_ENV
          curl -s -X POST -H "Content-Type: application/json" -d "{\"content\":\"🔨 Bruteforce candidates: ${BRUTE_CANDIDATES}\"}" "${{ env.DISCORD_WEBHOOK }}"

      - name: Fast DNS resolution (massdns) or dnsx fallback
        run: |
          mkdir -p scan-output/resolved
          cd scan-output
          if [ "${{ env.USE_MASSDNS }}" = "true" ] && command -v massdns >/dev/null 2>&1; then
            cat passive/passive_subs.txt bruteforce/brute_candidates.txt 2>/dev/null | sed '/^\s*$/d' | sort -u > all_candidates.txt
            split -l 5000 all_candidates.txt chunk_
            > massdns-raw.txt
            for f in chunk_*; do
              massdns -r ../resolvers/resolvers.txt -t A -o S $f >> massdns-raw.txt || true
            done
            awk '{print $1}' massdns-raw.txt | sed 's/\.$//' | sed '/^\s*$/d' | sort -u > resolved/massdns_resolved.txt || true
          elif command -v dnsx >/dev/null 2>&1; then
            dnsx -l ../scan-output/bruteforce/brute_candidates.txt -silent -resp -o resolved/dnsx_resolved.txt || true
          else
            > resolved/simple_resolved.txt
            while read -r host; do
              if getent hosts "$host" >/dev/null 2>&1; then
                echo "$host" >> resolved/simple_resolved.txt
              fi
            done < ../scan-output/bruteforce/brute_candidates.txt || true
            sort -u resolved/simple_resolved.txt -o resolved/simple_resolved.txt || true
          fi
          cd ..

      - name: Merge & dedupe subdomains
        run: |
          mkdir -p scan-output/merged
          cat scan-output/passive/passive_subs.txt scan-output/resolved/massdns_resolved.txt scan-output/resolved/dnsx_resolved.txt scan-output/resolved/simple_resolved.txt 2>/dev/null | sed '/^\s*$/d' | sort -u > scan-output/merged/combined_subdomains.txt || true
          COMBINED_COUNT=$(wc -l < scan-output/merged/combined_subdomains.txt || echo 0)
          echo "COMBINED_COUNT=${COMBINED_COUNT}" >> $GITHUB_ENV
          curl -s -X POST -H "Content-Type: application/json" -d "{\"content\":\"🗂️ Combined subdomains: ${COMBINED_COUNT} unique\"}" "${{ env.DISCORD_WEBHOOK }}"

      - name: Probe HTTP(s) (httpx) for live hosts & collect URLs
        run: |
          mkdir -p scan-output/live
          if command -v httpx >/dev/null 2>&1; then
            httpx -l scan-output/merged/combined_subdomains.txt -silent -threads "${{ env.CONC }}" -status-code -o scan-output/live/httpx_all.txt || true
            awk '{print $1}' scan-output/live/httpx_all.txt | sed 's|https\?://||' | sed 's/:[0-9]*$//' | sort -u > scan-output/live/live_hosts.txt || true
            awk '{print $1}' scan-output/live/httpx_all.txt | sort -u > scan-output/live/live_urls.txt || true
          else
            > scan-output/live/live_hosts.txt
          fi
          LIVE_COUNT=$(wc -l < scan-output/live/live_hosts.txt || echo 0)
          echo "LIVE_COUNT=${LIVE_COUNT}" >> $GITHUB_ENV
          curl -s -X POST -H "Content-Type: application/json" -d "{\"content\":\"📡 Live hosts: ${LIVE_COUNT} responsive\"}" "${{ env.DISCORD_WEBHOOK }}"

      - name: Optional port scan (naabu)
        if: env.ENABLE_NAABU == 'true'
        run: |
          if command -v naabu >/dev/null 2>&1; then
            naabu -l scan-output/live/live_hosts.txt -silent -top-ports 100 -rate 300 -o scan-output/naabu/naabu-ports.txt || true
            sort -u scan-output/naabu/naabu-ports.txt -o scan-output/naabu/naabu-ports.txt || true
          else
            echo "::warning::naabu not installed - skipping port scan"
          fi

      - name: Subdomain takeover check (subjack + nuclei takeover templates)
        run: |
          mkdir -p scan-output/takeover
          # subjack scan (CNAME based fingerprints)
          if command -v subjack >/dev/null 2>&1; then
            subjack -w scan-output/merged/combined_subdomains.txt -a -t 40 -timeout 30 -ssl -c /dev/null -o scan-output/takeover/subjack_raw.txt 2>/dev/null || true
            grep -i "vulnerable" scan-output/takeover/subjack_raw.txt > scan-output/takeover/subjack_results.txt || true
          fi
          # nuclei takeover templates
          if command -v nuclei >/dev/null 2>&1; then
            nuclei -l scan-output/live/live_urls.txt -tags takeover -silent -o scan-output/takeover/nuclei_takeover.txt || true
          fi
          SJ_COUNT=$(wc -l < scan-output/takeover/subjack_results.txt 2>/dev/null || echo 0)
          NUC_TK_COUNT=$(wc -l < scan-output/takeover/nuclei_takeover.txt 2>/dev/null || echo 0)
          echo "SUBJACK_COUNT=${SJ_COUNT}" >> $GITHUB_ENV
          echo "NUC_TK_COUNT=${NUC_TK_COUNT}" >> $GITHUB_ENV
          if [ "${SJ_COUNT}" -gt 0 ] || [ "${NUC_TK_COUNT}" -gt 0 ]; then
            curl -s -X POST -H "Content-Type: application/json" -d "{\"content\":\"🚨 Potential takeover candidates found — subjack: ${SJ_COUNT}, nuclei_takeover: ${NUC_TK_COUNT} (see artifacts)\"}" "${{ env.DISCORD_WEBHOOK }}"
          fi

      - name: Nuclei vulnerability scan (critical/high)
        if: env.ENABLE_NUCLEI == 'true'
        run: |
          mkdir -p scan-output/nuclei
          if ! command -v nuclei >/dev/null 2>&1; then
            echo "::warning::nuclei not installed - skipping nuclei"
            exit 0
          fi
          nuclei -update-templates || true
          if [ -s scan-output/live/live_urls.txt ]; then
            nuclei -l scan-output/live/live_urls.txt -severity critical,high -silent -o scan-output/nuclei/nuclei_results.txt || true
          else
            nuclei -l scan-output/live/live_hosts.txt -severity critical,high -silent -o scan-output/nuclei/nuclei_results.txt || true
          fi
          NUC_COUNT=$(wc -l < scan-output/nuclei/nuclei_results.txt 2>/dev/null || echo 0)
          echo "NUC_COUNT=${NUC_COUNT}" >> $GITHUB_ENV
          if [ "${NUC_COUNT}" -gt 0 ]; then
            split -l 10 scan-output/nuclei/nuclei_results.txt nuclei-batch-
            for f in nuclei-batch-*; do
              BODY=$(cat "$f")
              curl -s -X POST -H "Content-Type: application/json" -d "{\"content\": $(echo \"$BODY\" | jq -Rs .)}" "${{ env.DISCORD_WEBHOOK }}"
              sleep 1
            done
          else
            curl -s -X POST -H "Content-Type: application/json" -d "{\"content\":\"✅ nuclei: no critical/high results for ${{ env.DOMAIN }}.\"}" "${{ env.DISCORD_WEBHOOK }}"
          fi

      - name: Aggregate summary & notify
        run: |
          # Read counts (shell-safe)
          PASSIVE_COUNT="${PASSIVE_COUNT:-$(cat scan-output/passive/passive_subs.txt 2>/dev/null | wc -l || echo 0)}"
          COMBINED_COUNT="${COMBINED_COUNT:-$(cat scan-output/merged/combined_subdomains.txt 2>/dev/null | wc -l || echo 0)}"
          LIVE_COUNT="${LIVE_COUNT:-$(cat scan-output/live/live_hosts.txt 2>/dev/null | wc -l || echo 0)}"
          NUC_COUNT="${NUC_COUNT:-$(cat scan-output/nuclei/nuclei_results.txt 2>/dev/null | wc -l || echo 0)}"
          SJ_COUNT="$(cat scan-output/takeover/subjack_results.txt 2>/dev/null | wc -l || echo 0)"
          NUC_TK_COUNT="$(cat scan-output/takeover/nuclei_takeover.txt 2>/dev/null | wc -l || echo 0)"
          SUMMARY="✅ Deep scan finished\nDomain: ${{ env.DOMAIN }}\nPassive subs: ${PASSIVE_COUNT}\nCombined subs: ${COMBINED_COUNT}\nLive hosts: ${LIVE_COUNT}\nNuclei findings: ${NUC_COUNT}\nTakeover candidates (subjack): ${SJ_COUNT}\nTakeover templates (nuclei): ${NUC_TK_COUNT}"
          curl -s -X POST -H "Content-Type: application/json" -d "{\"content\": $(echo \"$SUMMARY\" | jq -Rs .)}" "${{ env.DISCORD_WEBHOOK }}"

      - name: Upload artifacts (all output)
        uses: actions/upload-artifact@v4
        with:
          name: deep-scan-${{ env.DOMAIN }}-${{ github.run_id }}
          path: |
            scan-output/passive/*
            scan-output/bruteforce/*
            scan-output/resolved/*
            scan-output/merged/*
            scan-output/live/*
            scan-output/naabu/*
            scan-output/takeover/*
            scan-output/nuclei/*

      - name: Final note
        run: |
          curl -s -X POST -H "Content-Type: application/json" -d "{\"content\":\"✅ Scan artifacts uploaded. Please triage findings manually — false positives possible.\"}" "${{ env.DISCORD_WEBHOOK }}"
